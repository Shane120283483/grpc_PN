# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import PNdiagnose_pb2 as PNdiagnose__pb2


class DiagnoserStub(object):
    """package PNdiagnose;

    The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDiagnosis = channel.unary_unary(
                '/Diagnoser/GetDiagnosis',
                request_serializer=PNdiagnose__pb2.DiagRequest.SerializeToString,
                response_deserializer=PNdiagnose__pb2.DiagReply.FromString,
                )


class DiagnoserServicer(object):
    """package PNdiagnose;

    The greeting service definition.
    """

    def GetDiagnosis(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiagnoserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDiagnosis': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDiagnosis,
                    request_deserializer=PNdiagnose__pb2.DiagRequest.FromString,
                    response_serializer=PNdiagnose__pb2.DiagReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Diagnoser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Diagnoser(object):
    """package PNdiagnose;

    The greeting service definition.
    """

    @staticmethod
    def GetDiagnosis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Diagnoser/GetDiagnosis',
            PNdiagnose__pb2.DiagRequest.SerializeToString,
            PNdiagnose__pb2.DiagReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
